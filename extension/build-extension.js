#!/usr/bin/env node

import { copyFileSync, mkdirSync, existsSync, renameSync } from "fs";
import { resolve, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const distDir = resolve(__dirname, "dist");

// Ensure dist directory exists
if (!existsSync(distDir)) {
  mkdirSync(distDir, { recursive: true });
}

// Ensure icons directory exists in dist
const iconsDistDir = resolve(distDir, "icons");
if (!existsSync(iconsDistDir)) {
  mkdirSync(iconsDistDir, { recursive: true });
}

// Files to copy to dist
const filesToCopy = [
  "manifest.json",
  "background.js",
  "content_ao.js",
  "ao-sdk.js",
];

// Icons to copy
const iconsToCopy = [
  "icons/icon16.png",
  "icons/icon32.png",
  "icons/icon48.png",
  "icons/icon128.png",
];

console.log("🚀 Building AO Shield Extension...");

// Copy main files
filesToCopy.forEach((file) => {
  try {
    copyFileSync(resolve(__dirname, file), resolve(distDir, file));
    console.log(`✅ Copied ${file}`);
  } catch (error) {
    console.error(`❌ Failed to copy ${file}:`, error.message);
  }
});

// Copy icons
iconsToCopy.forEach((icon) => {
  try {
    copyFileSync(resolve(__dirname, icon), resolve(distDir, icon));
    console.log(`✅ Copied ${icon}`);
  } catch (error) {
    console.error(`❌ Failed to copy ${icon}:`, error.message);
  }
});

// Copy the built popup HTML (will be generated by Vite build)
try {
  const indexHtmlPath = resolve(__dirname, "dist", "index.html");
  const popupHtmlPath = resolve(__dirname, "dist", "popup.html");

  if (existsSync(indexHtmlPath)) {
    copyFileSync(indexHtmlPath, popupHtmlPath);
    console.log("✅ Renamed index.html to popup.html");
  }
} catch (error) {
  console.error("❌ Failed to rename index.html to popup.html:", error.message);
}

console.log("🎉 Extension build complete!");
console.log("📁 Files are ready in ./dist folder");
console.log("🔧 Load the extension in Chrome from the dist folder");
